import snowflake.connector
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

def run_data_quality_report(table_list, column_checks, conn, column_list=None):
    data = []
    for table_name in table_list:
        if column_list:
            cols = column_list[table_name]
        else:
            cols = column_checks[table_name].keys()
        for col_name in cols:
            checks = column_checks[table_name][col_name]
            for check_type, check_script in checks.items():
                query = f"SELECT COUNT(*) FROM {table_name} WHERE {col_name} IS NOT NULL AND {check_script};"
                cursor = conn.cursor()
                cursor.execute(query)
                result = cursor.fetchone()[0]
                if result > 0:
                    print(f"Data quality issue detected in table '{table_name}', column '{col_name}', check '{check_type}': {result} rows failed the check.")
                    data.append([table_name, col_name, check_type, result])
                else:
                    print(f"No data quality issues detected in table '{table_name}', column '{col_name}', check '{check_type}'.")
    return pd.DataFrame(data, columns=['Table Name', 'Column Name', 'Check Type', 'Issue Count'])

# Replace <your_account>, <your_user>, <your_password>, and <your_database> with your Snowflake credentials
conn = snowflake.connector.connect(
    user='<your_user>',
    password='<your_password>',
    account='<your_account>',
    database='<your_database>',
    warehouse='COMPUTE_WH',
    schema='PUBLIC'
)

# Define the tables and columns to check, along with the data quality checks to perform for each column
table_list = ['table1', 'table2', 'table3']
column_checks = {
    'table1': {
        'col1': {
            'Null Check': 'IS NULL',
            'Pattern Check': "NOT REGEXP_LIKE(col1, '[A-Za-z0-9_]+')"
        },
        'col2': {
            'Null Check': 'IS NULL'
        }
    },
    'table2': {
        'col3': {
            'Null Check': 'IS NULL',
            'Range Check': 'col3 BETWEEN 0 AND 100'
        },
        'col4': {
            'Null Check': 'IS NULL',
            'Type Check': 'TRY_TO_TIMESTAMP(col4) IS NULL'
        }
    },
    'table3': {
        'col5': {
            'Null Check': 'IS NULL'
        },
        'col6': {
            'Null Check': 'IS NULL',
            'Duplicate Check': f"{'col6'} IN (SELECT {'col6'} FROM {'table3'} GROUP BY {'col6'} HAVING COUNT(*) > 1)"
        }
    }
}

# Define the columns to check for each table
column_list = {
    'table1': ['col1', 'col2'],
    'table2': ['col3', 'col4'],
    'table3': ['col5', 'col6']
}

df = run_data_quality_report(table_list, column_checks, conn, column_list)

conn.close()

if not df.empty:
    # Create a bar chart to display the data quality report
    fig = px.bar(df, x='Table Name', y='Issue Count', color='Check Type', barmode='group')
    fig.update_layout(title_text='Data Quality Report', xaxis_title='Table Name', yaxis_title='Issue Count')
    fig.show()
else:
    print('No data quality issues detected.')




def run_data_quality_report(table_list, column_checks, conn, column_list=None):
    data = []
    for table_name in table_list:
        if column_list:
            cols = column_list[table_name]
        else:
            cols = column_checks[table_name].keys()
        for col_name in cols:
            checks = column_checks[table_name][col_name]
            for check_type, check_script in checks.items():
                # Use proper syntax for Snowflake SQL functions and escape column names and table names with quotes
                query = f"SELECT COUNT(*) FROM \"{table_name}\" WHERE \"{col_name}\" IS NOT NULL AND {check_script};"
                cursor = conn.cursor()
                cursor.execute(query)
                result = cursor.fetchone()[0]
                if result > 0:
                    print(f"Data quality issue detected in table '{table_name}', column '{col_name}', check '{check_type}': {result} rows failed the check.")
                    data.append([table_name, col_name, check_type, result])
                else:
                    print(f"No data quality issues detected in table '{table_name}', column '{col_name}', check '{check_type}'.")
    return pd.DataFrame(data, columns=['Table Name', 'Column Name', 'Check Type', 'Issue Count'])
